import { assert } from 'chai';

import {
  removeValueFilter,
  truthyFilter,
  uniqueFilter
} from '../array';


describe('helpers/array', () => {
  describe('removeValueFilter', () => {
    it('creates a (filter) function', () => {
      assert.isFunction(removeValueFilter('value'));
    });

    it('rejects the specified value', () => {
      const array = ['a', 'b', 'c', 'a', 'c', 'c', 'b', 'a', 'd'];
      const value = 'c';
      const expected = ['a', 'b', 'a', 'b', 'a', 'd'];
      assert.deepEqual(array.filter(removeValueFilter(value)), expected);
    });
  });

  describe('truthyFilter', () => {
    it('filters `undefined`', () => {
      const array = ['a', void 0, 'b', 'c', void 0];
      const expected = ['a', 'b', 'c'];
      assert.deepEqual(array.filter(truthyFilter), expected);
    });

    it('filters empty string', () => {
      const array = ['', 'a', 'b', '', 'c', '', ''];
      const expected = ['a', 'b', 'c'];
      assert.deepEqual(array.filter(truthyFilter), expected);
    });

    it('filters zero', () => {
      const array = ['a', 0, 5, 'b', 10, 0, 'c'];
      const expected = ['a', 5, 'b', 10, 'c'];
      assert.deepEqual(array.filter(truthyFilter), expected);
    });

    it('filters false', () => {
      const array = ['a', 'b', true, false, 'c', false];
      const expected = ['a', 'b', true, 'c'];
      assert.deepEqual(array.filter(truthyFilter), expected);
    });
  });

  describe('uniqueFilter', () => {
    it('removes all duplicates (keeping only the first occurrence)', () => {
      const array = ['a', 'b', 'a', 'c', 'a', 'd', 'b'];
      const expected = ['a', 'b', 'c', 'd'];
      assert.deepEqual(array.filter(uniqueFilter), expected);
    });
  });
});
