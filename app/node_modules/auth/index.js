import * as React from 'react';
import { withRouter } from 'react-router';
import RoutingConstants from 'config/routing-constants';
import AuthApi from './api';
import storage from 'helpers/storage';
import hasAdminAccess from './has-admin-access';


/**
 * A Higher-Order Component for fetching data about the current user.
 *
 * This component passes the following props to the wrapped component:
 * - **me**: an object containing the current user, or null if the user is not
 *    signed in (defaults to null).
 *
 * @param {Component} WrappedComponent  The component that should only be
 *  accessible to authenticated admin users.
 */
const Auth = (WrappedComponent) => withRouter(React.createClass({
  displayName: 'Auth',

  propTypes: {
    location: React.PropTypes.shape({
      pathname: React.PropTypes.string.isRequired,
      query: React.PropTypes.shape({
        iristoken: React.PropTypes.string,
      }).isRequired,
    }).isRequired,
    router: React.PropTypes.shape({
      push: React.PropTypes.func.isRequired,
      replace: React.PropTypes.func.isRequired,
    }).isRequired,
  },

  getInitialState: () => ({
    me: null,
    finishedLoading: false,
  }),

  componentWillMount() {
    if (this.props.location.pathname !== '/petitions') {
      storage.setItem('redirect-url', JSON.stringify(this.props.location));
    }
    AuthApi.whoami().then(response => {
      let state = {
        me: null,
        finishedLoading: true,
      };
      if (response.status === 'ok') {
        state = {
          me: response.data,
          finishedLoading: true,
        };
      }
      this.setState(state);
    }).catch(() => {
      this.setState({
        me: null,
        finishedLoading: true,
      });
    });
  },

  showLoginPage() {
    setTimeout(() => {
      this.props.router.push(RoutingConstants.LOGIN);
    }, 6);
  },

  render() {
    if (this.state.finishedLoading) {
      if (hasAdminAccess(this.state.me)) {
        return (
          <WrappedComponent {...this.props} me={this.state.me} />
        );
      }
      this.showLoginPage();
    }
    return <div />;
  }
}));


export default Auth;
