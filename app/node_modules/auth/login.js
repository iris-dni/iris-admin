import * as React from 'react';
import { withRouter } from 'react-router';
import Helmet from 'react-helmet';
import { translate } from 'config/strings';
import settings from 'config/settings';
import Alert from 'components/alert';
import AuthAPI from './api';
import hasAdminAccess from './has-admin-access';
import withTitle from '../components/page/with-title';


const getAdminBase = () => {
  const { host, pathname, protocol } = window.location;
  return `${protocol}//${host}${pathname}`;
};

const getAdminTokenUrl = () => {
  return `${getAdminBase()}${encodeURIComponent('#/')}`;
};

const getSSOLoginUrl = (loginUrl) => {
  let delimiter = loginUrl.indexOf('?') < 0 ? '?' : '&';
  return `${loginUrl}${delimiter}irisreturl=${getAdminTokenUrl()}`;
};


export default withRouter(withTitle(React.createClass({
  displayName: 'Login',

  propTypes: {
    router: React.PropTypes.shape({
      replace: React.PropTypes.func.isRequired,
    }).isRequired,
  },

  getInitialState: () => ({
    message: '',
  }),

  componentWillMount() {
    AuthAPI.whoami().then(response => {
      if (response.status === 'ok') {
        if (hasAdminAccess(response.data)) {
          this.props.router.replace('/');
        } else {
          this.setState({
            message: translate('auth.no-admin-permission'),
          });
        }
      }
    }).catch(() => { });
  },

  render() {
    return (
      <div className="container-fluid" style={{ marginTop: 40, maxWidth: 768 }}>
        <Helmet title='Login' />
        <h1>Iris Login</h1>
        <Alert message={this.state.message} />
        <p>To access the Admin UI of Iris, you need to authenticate via SSO.</p>
        {
          settings.ssoProviders.map(p => (
            <p key={p.loginUrl}>
              <a
                className="btn btn-default"
                href={getSSOLoginUrl(p.loginUrl)}
              >{translate('auth.sso.authenticate').replace('$1', p.name)}</a>
            </p>
          ))
        }
      </div>
    );
  }
})));
