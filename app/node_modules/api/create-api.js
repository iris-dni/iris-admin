
const api = (apiName) => window.__swaggerClient.apis[apiName];

const UNKNOWN_ERROR = { error: 'UNKNOWN' };

/**
 * Creates an API object that operates on the specified swagger interface.
 */
const createApi = (apiName) => ({
  search(params) {
    return new Promise((resolve, reject) => {
      api(apiName).search(params)
        .then((response) => {
          if (response && response.obj) {
            resolve(response.obj);
          } else {
            reject(UNKNOWN_ERROR);
          }
        })
        .catch((response) => {
          if (response && response.obj) {
            reject(response.obj);
          } else {
            reject(UNKNOWN_ERROR);
          }
        });
    });
  },

  get(id) {
    return new Promise((resolve, reject) => {
      api(apiName).get({ contentId: id })
        .then((response) => {
          if (response && response.obj) {
            resolve({ data: response.obj.data });
          } else {
            reject(UNKNOWN_ERROR);
          }
        })
        .catch((response) => {
          if (response && response.obj) {
            reject(response.obj);
          } else {
            reject(UNKNOWN_ERROR);
          }
        });
    });
  },

  delete(id) {
    return new Promise((resolve, reject) => {
      api(apiName).delete({ contentId: id })
        .then((response) => {
          if (response && response.obj) {
            resolve({ data: response.obj.data });
          } else {
            reject(UNKNOWN_ERROR);
          }
        })
        .catch((response) => {
          if (response && response.obj) {
            reject(response.obj);
          } else {
            reject(UNKNOWN_ERROR);
          }
        });
    });
  },

  update(id, data) {
    return new Promise((resolve, reject) => {
      api(apiName).update({ contentId: id, data: { data: data } })
        .then((response) => {
          if (response && response.obj) {
            resolve({ data: response.obj.data });
          } else {
            reject(UNKNOWN_ERROR);
          }
        })
        .catch((response) => {
          if (response && response.obj) {
            reject(response.obj);
          } else {
            reject(UNKNOWN_ERROR);
          }
        });
    });
  }
});

export default createApi;
