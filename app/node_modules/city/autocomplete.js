import * as React from 'react';
import ApiAutocomplete from 'inputs/api-autocomplete';
import CityAPI from './api';


/**
 * Searches for cities via the Fulltext API.
 *
 * Returns a list of autocomplete items ({ value: any, label: string }).
 */
function searchCities(value) {
  return new Promise((resolve, reject) => {
    if (value && value.length > 2) {
      CityAPI.search({ ft: value, sort: 'score' }).then(response => {
        if (response && response.data) {
          // transform city objects to autocomplete items
          const autocompleteItems = response.data.map((city) => ({
            value: city.id,
            label: city.name,
          }));
          resolve(autocompleteItems);
        } else {
          reject(response);
        }
      }).catch(response => {
        reject(response);
      });
    } else {
      reject({ reason: 'Provide at least 3 characters!' });
    }
  });
}

/**
 * Retrieves a city by its id from the API.
 *
 * Gracefully falls back to an "empty" city.
 */
function getCity(id) {
  return new Promise((resolve) => {
    if (id) {
      if (typeof id === 'object') {
        // eslint-disable-next-line no-param-reassign
        id = id.id;
      }
      window.__CITY_API = CityAPI;
      CityAPI.get(id).then(response => {
        if (response && response.data) {
          resolve({
            value: response.data.id,
            label: response.data.name,
          });
        } else {
          resolve({ value: '', label: '' });
        }
      }).catch((/*response*/) => {
        resolve({ value: '', label: '' });
      });
    } else {
      resolve({ value: '', label: '' });
    }
  });
}


export default React.createClass({
  displayName: 'CityAutocomplete',

  render() {
    return (
      <ApiAutocomplete
        {...this.props}
        value={this.props.value.id}
        api={{ get: getCity, search: searchCities }}
      />
    );
  }
});
