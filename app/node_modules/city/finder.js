/* eslint-disable react/prop-types, react/no-multi-comp */
import * as React from 'react';
import { withRouter } from 'react-router';
import makePage from 'components/page';
import AutoLoadFinder from 'components/finder/autoload';
import QueryStateContainer from 'helpers/query-state-container';
import RoutingConstants from 'config/routing-constants';
import { translate } from 'config/strings';
import API from './api';
import CityModel from './model';


function getUsers(skip, batchSize, config) {
  const searchParams = {
    limit: batchSize,
    offset: skip,
    ft: config.q || void 0, // fulltext search
    sort: config.q && 'score' || void 0,
  };
  return API.search(searchParams);
}

const openUserEditor = (id, router) => {
  router.push(`/user/${id}`);
};

const columns = [
  {
    label: translate('cities.id')
  },
  {
    label: translate('cities.name')
  },
  {
    label: translate('cities.zips')
  },
  {
    label: translate('cities.tags')
  },
  {
    label: translate('cities.provider')
  },
  {
    label: translate('cities.state')
  }
];

const ItemsTemplate = ({ item, router }) => {
  const city = CityModel(item);
  if (city && city.id) {
    const zips = city.zips.join(', ');
    const tags = city.tags.join(', ');
    return (
      <tr>
        <td>{city.id}</td>
        <td>{city.name}</td>
        <td>{zips}</td>
        <td>{tags}</td>
        <td>{city.provider}</td>
        <td>{city.state}</td>
      </tr>
    );
  }
  return null;
};

export default withRouter(makePage(React.createClass({
  displayName: 'CityFinder',

  render() {
    const { location, router } = this.props;
    return (
      <div className="container-fluid">
        <h1>{translate('cities.finder-title')}</h1>
        <AutoLoadFinder
          columns={columns}
          fetchData={getUsers}
          itemsTemplate={ItemsTemplate}
          itemsTemplateProps={{ router }}
          searchConfig={[
            {
              name: 'q',
              type: 'string',
              id: 'searchField',
              addon: 'search',
              md: 6,
              placeholder: translate('cities.search.placeholder'),
            }
          ]}
          state={QueryStateContainer(location, router, RoutingConstants.CITIES.pathname)}
          uniqueItemProperty="id"
        />
      </div>
    );
  }
})));
