import * as React from 'react';
import Icon from 'components/icon';
import {
  roleComponentConfigs,
  inputComponentConfigs,
  enhanceSearchConfig
} from './search-form-utils';


/**
 * The search form used by <Finder />.
 *
 * This component dynamically builds a form from a search configuration.
 */
export default React.createClass({
  displayName: 'SearchForm',

  propTypes: {
    onAction: React.PropTypes.func.isRequired,
    onValueChange: React.PropTypes.func.isRequired,
    searchConfig: React.PropTypes.arrayOf(
      React.PropTypes.shape({
        addon: React.PropTypes.string,
        defaultValue: React.PropTypes.string,
        label: React.PropTypes.string,
        lg: React.PropTypes.number,
        md: React.PropTypes.number,
        name: React.PropTypes.string.isRequired,
        placeholder: React.PropTypes.string,
        pull: React.PropTypes.oneOf(['left', 'right']),
        role: React.PropTypes.oneOf(Object.keys(roleComponentConfigs)),
        type: React.PropTypes.oneOf(Object.keys(inputComponentConfigs)),
        value: React.PropTypes.string,
        xs: React.PropTypes.number,
      })
    ).isRequired,
  },

  getDefaultProps() {
    return {
      searchConfig: [],
    };
  },

  handleSubmit(e) {
    e.preventDefault();

    this.handleAction('submit');
  },

  handleValueChange(keys, values, valids) {
    this.props.onValueChange(keys, values, valids);
  },

  handleAction(key) {
    this.props.onAction(key);
  },

  renderRoleComponent(c) {
    const { component: RoleComponent, props } = roleComponentConfigs[c.role];
    return (
      <RoleComponent {...props} {...c.props} onAction={this.handleAction} />
    );
  },

  renderInputComponent(c) {
    const { component: InputComponent, props } = inputComponentConfigs[c.type];
    let className = c.addon ? 'input-group' : '';
    if (c.pull) {
      className += ` pull-${c.pull}`;
    }
    return (
      <div className={className}>
        { c.addon
          ? <div className="input-group-addon">
              <Icon icon={c.addon} />
            </div>
          : null
        }
        <label
          className={c.showLabel ? void 0 : 'sr-only'}
          htmlFor={c.id}
          style={{paddingRight: 8, fontWeight: 'normal'}}
        >
          {c.label || c.placeholder || c.name}
        </label>
        <InputComponent
          {...props}
          {...c}
          id={c.id}
          name={c.name}
          placeholder={c.placeholder}
          onValueChange={this.handleValueChange}
          value={c.value}
        />
      </div>
    );
  },

  render() {
    const searchConfig = this.props.searchConfig.map(enhanceSearchConfig);
    return (
      <form onSubmit={this.handleSubmit}>
        <div className="row">
          {
            searchConfig.map(c => {
              const className = `col-lg-${c.lg} col-md-${c.md} col-xs-${c.xs}`;
              return (
                <div key={c.name} className={className}>
                  <div className="form-group form-inline clearfix">
                    {
                      c.role
                      ? this.renderRoleComponent(c)
                      : this.renderInputComponent(c)
                    }
                  </div>
                </div>
              );
            })
          }
        </div>
      </form>
    );
  }
});
