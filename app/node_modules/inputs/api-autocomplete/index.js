import * as React from 'react';
import Autocomplete from 'inputs/autocomplete';
import { InputPropTypes } from 'inputs/prop-types';


/**
 * A wrapper around the Autocomplete component that adds the functionality to
 * update the list of autocomplete items on the fly.
 */
export default React.createClass({
  displayName: 'ApiAutocomplete',

  propTypes: Object.assign({}, InputPropTypes, {
    /**
     * The API to be used to retrieve autocomplete items.
     */
    api: React.PropTypes.shape({
      /**
       * Used to retrieve the inital value.
       *
       * Signature: (string) => Promise<Item>
       *
       * Parameters:
       *  - value (string)  The value passed as prop.
       */
      get: React.PropTypes.func.isRequired,

      /**
       * Used to retrieve autocomplete items.
       *
       * Signature: (string) => Promise<Item[]>
       *
       * Parameters:
       *  - value (string)  The current value of the input element.
       */
      search: React.PropTypes.func.isRequired,
    }).isRequired,

    value: React.PropTypes.string,
  }),

  getInitialState: () => ({
    items: [],
    initialValue: '',
  }),

  componentWillMount() {
    this.fetchValue(this.props.value);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this.fetchValue(nextProps.value);
    }
  },

  fetchValue(value) {
    this.props.api.get(value).then(item => {
      this.setState({ initialValue: item.label });
    }).catch(reason => {
      console.log(reason); // eslint-disable-line
    });
  },

  handleChange(e, value) {
    this.props.api.search(value).then(items => {
      this.setState({ items });
    }).catch((/*reason*/) => {
      // ignore and keep the current state
    });
  },

  render() {
    return (
      <Autocomplete
        {...this.props}
        items={this.state.items}
        value={this.state.initialValue}
        _onChange={this.handleChange}
      />
    );
  }
});
