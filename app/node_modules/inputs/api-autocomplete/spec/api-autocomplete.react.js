import * as React from 'react';
import { assert } from 'chai';
import { mount } from 'enzyme';

import Autocomplete from '../../autocomplete';
import ApiAutocomplete from '../';


const makeAutocomplete = (onChange, api, otherProps = {}) => mount(
  <ApiAutocomplete
    onValueChange={onChange}
    api={api}
    {...otherProps}
  />
);

const simulateInputChange = (wrapper, newValue) => {
  wrapper.find('input').get(0).value = newValue;
  wrapper.find('input').first().simulate('change');
};


describe('<ApiAutocomplete />', () => {
  it('uses an <Autocomplete />', () => {
    const api = {
      get: () => Promise.resolve({ value: '', label: '' }),
      search: () => Promise.resolve([]),
    };
    const wrapper = makeAutocomplete(() => {}, api, { id: 'id', name: 'name' });
    assert.equal(wrapper.find(Autocomplete).length, 1);
  });

  it('calls "api.get" with the value prop', (done) => {
    const api = {
      get: (v) => {
        assert.equal(v, 'abc');
        done();
        return Promise.resolve({ value: '', label: '' });
      },
      search: () => Promise.resolve([]),
    };

    makeAutocomplete(() => {}, api, { value: 'abc', id: 'id', name: 'name' });
  });

  it('calls "api.search" on every change', () => {
    let called = 0;
    const api = {
      get: () => Promise.resolve({ value: '', label: '' }),
      search: () => (++called) && Promise.resolve([])
    };

    const wrapper = makeAutocomplete(() => {}, api, { id: 'id', name: 'name' });
    simulateInputChange(wrapper, 'a');
    simulateInputChange(wrapper, 'ab');
    assert.equal(called, 2);
  });
});
