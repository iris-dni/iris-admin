import * as React from 'react';
import { assert } from 'chai';
import { mount } from 'enzyme';

import Autocomplete from '../';


const defaultItems =  [
  { value: 'aargau', label: 'Aargau' },
  { value: 'zurich', label: 'ZÃ¼rich' }
];

const makeAutocomplete = (id, name, onChange, items = defaultItems) => mount(
  <Autocomplete
    id={id}
    name={name}
    onValueChange={onChange}
    items={items}
    />
);

const simulateInputChange = (wrapper, newValue) => {
  wrapper.find('input').get(0).value = newValue;
  wrapper.find('input').first().simulate('change');
};

describe('<Autocomplete />', () => {
  it('renders an <input /> element', () => {
    const wrapper = makeAutocomplete('id', 'name', () => { });
    const inputs = wrapper.find('input');
    assert.equal(inputs.length, 1);
  });

  it('if focused renders an autocomplete menu', () => {
    const wrapper = makeAutocomplete('id', 'name', () => { }, []);
    wrapper.find('input').first().simulate('focus');
    // 1st div = wrapper
    // 2nd div = menu
    assert.equal(wrapper.find('div').length, 2);
  });

  it('does not call onValueChange when the input value changes', () => {
    const wrapper = makeAutocomplete('id', 'name', () => {
      assert.fail();
    });
    simulateInputChange(wrapper, 'new value');
  });

  it('calls onValueChange when the input value is a valid value', (done) => {
    const wrapper = makeAutocomplete('id', 'name', () => {
      done();
    });
    simulateInputChange(wrapper, 'Aargau');
  });

  it('calls onValueChange with name & value', (done) => {
    const wrapper = makeAutocomplete('id', 'name', (name, value) => {
      assert.equal(name, 'name');
      assert.equal(value, 'aargau');
      done();
    });
    simulateInputChange(wrapper, 'Aargau');
  });

  it('calls onValueChange when selecting from menu', (done) => {
    const wrapper = makeAutocomplete('id', 'name', (name, value) => {
      assert.equal(name, 'name');
      assert.equal(value, 'aargau');
      done();
    });
    // focus -> autocomplete menu is shown
    wrapper.find('input').first().simulate('focus');
    // type -> autocomplete menu filters items
    simulateInputChange(wrapper, 'Aa');
    // click -> select the first item
    wrapper.find('div').at(2).simulate('click');
  });
});
