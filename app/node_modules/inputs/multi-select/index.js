import * as React from 'react';
import { InputPropTypes, ItemShape } from 'inputs/prop-types';
import Dropdown from 'inputs/dropdown';
import Chip from 'components/chip';
import {
  uniqueFilter,
  removeValueFilter,
  truthyFilter
} from 'helpers/array';


/**
 * Allows selecting multiple values from a collection.
 *
 * <MultiSelect /> displays the selected values as <Chip /> elements that can
 * be deleted.
 *
 * This component only allows choosing values that are currently not selected.
 */
export default React.createClass({
  displayName: 'MultiSelect',

  propTypes: Object.assign({}, InputPropTypes, {
    /**
     * The options the user can choose from.
     */
    options: React.PropTypes.arrayOf(ItemShape).isRequired,

    /**
     * The current value of this <MultiSelect />.
     *
     * Expected to be a comma-separated list, e.g "winner,signable".
     */
    value: React.PropTypes.string,
  }),

  handleAddItem(compName, valueToAdd/*, isValid*/) {
    const { name, onValueChange, value } = this.props;
    const values = value.split(',')
      .concat(valueToAdd)
      .filter(uniqueFilter)
      .filter(truthyFilter);
    onValueChange(name, values.join(','), true);
  },

  handleRemoveItem(compName, valueToRemove/*, isValid*/) {
    const { name, onValueChange, value } = this.props;
    const values = value.split(',')
      .filter(removeValueFilter(valueToRemove))
      .filter(uniqueFilter)
      .filter(truthyFilter);
    onValueChange(name, values.join(','), true);
  },

  render() {
    const { id, options, value } = this.props;
    const valueArray = value.split(',')
      .filter(uniqueFilter)
      .filter(truthyFilter);
    const filteredOptions = options.filter(o =>
      !valueArray.find(v => v === o.value)
    );
    return (
      <div>
        <Dropdown
          attributes={{
            style: {
              display: 'inline-block',
              width: 'auto',
            }
          }}
          id={id}
          name="dropdown"
          options={[{ value: '', label: 'Filtered by'}].concat(filteredOptions)}
          onValueChange={this.handleAddItem}
          value=""
        />
        <span>
          {
            valueArray.map(val => {
              const item = options.find(option => option.value === val);
              if (item) {
                return (
                  <Chip
                    key={item.value}
                    label={item.label}
                    name="chip"
                    value={item.value}
                    onDelete={this.handleRemoveItem}
                    attributes={{
                      style: {
                        marginLeft: 8,
                      }
                    }}
                  />
                );
              }
              return null;
            })
          }
        </span>
      </div>
    );
  }
});
