import * as React from 'react';
import { assert } from 'chai';
import { mount } from 'enzyme';
import Chip from 'components/chip';
import Dropdown from 'inputs/dropdown';

import MultiSelect from '../';


const options = [
  { value: 'aargau', label: 'Aargau' },
  { value: 'genf', label: 'Genf'},
  { value: 'zurich', label: 'Zürich' }
];

const makeMultiSelect = (value, onChange) => mount(
  <MultiSelect
    id="ms-id"
    name="ms-name"
    onValueChange={onChange}
    options={options}
    value={value}
  />
);

describe('<MultiSelect />', () => {
  it('renders each chosen value as a <Chip />', () => {
    const wrapper = makeMultiSelect('aargau,zurich', () => {});
    assert.equal(wrapper.find(Chip).length, 2);
    ['Aargau', 'Zürich'].forEach((city, index) => {
      assert.equal(wrapper.find(Chip).at(index).text(), city);
    });
  });

  it('only lists options in the DropDown that are currently not chosen', () => {
    const wrapper = makeMultiSelect('aargau,zurich', () => {});
    const dropdown = wrapper.find(Dropdown);
    // 1: 'Add More'
    // 2: Genf
    assert.equal(dropdown.props().options.length, 2);
    assert.equal(dropdown.props().options[1].value, 'genf');
  });

  it('calls onValueChange when option is selected', (done) => {
    const handleChange = (name, value) => {
      assert.sameMembers(['genf', 'aargau'], value.split(','));
      done();
    };
    const wrapper = makeMultiSelect('genf', handleChange);
    wrapper.find(Dropdown).find('select').get(0).value = 'aargau';
    wrapper.find(Dropdown).find('select').first().simulate('change');
  });

  it('calls onValueChange when option is removed', (done) => {
    const handleChange = (name, value) => {
      assert.sameMembers([], value.split(',').filter(v => !!v));
      done();
    };
    const wrapper = makeMultiSelect('genf', handleChange);
    wrapper.find(Chip).first().find('.chip__delete').simulate('click');
  });
});
