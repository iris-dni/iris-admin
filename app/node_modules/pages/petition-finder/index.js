/* eslint-disable react/prop-types, react/no-multi-comp */
import * as React from 'react';
import { withRouter } from 'react-router';
import makePage from 'components/page';
import Finder from 'components/finder';
import QueryStateContainer from 'helpers/query-state-container';
import tapEvent from 'helpers/tap-event';
import RoutingConstants from 'config/routing-constants';

const AutoLoadFinder = tapEvent('scroll', '#page-content-wrapper', Finder);


/* eslint-disable no-console */
function getData(skip, batchSize, config) {
  console.log(`loading data with config`, config);
  return new Promise((resolve, reject) => {
    let data = [];
    for (let i = skip; i < Math.min(135, skip + batchSize); i++) {
      data.push({
        title: `${config.sort} -- ${config.title}`,
        id: i,
        city: config.city || ['Aarau', 'Dornbirn', 'ZÃ¼rich', 'Luzern'][Math.floor(Math.random() * 4)],
        percentage: Math.floor(Math.random() * 100),
        supporters: [],
        status: ['active', 'closed', 'draft'][Math.floor(Math.random() * 3)]
      });
    }
    setTimeout(() => {
      if (Math.random() * 10 < 2) {
        reject({ message: 'API Error' });
      } else {
        resolve({
          data: data,
          totalHits: 135
        });
      }
    }, 1000);
  });
}

/* eslint-disable no-unused-vars */
const openPetitionEditor = (id, router) => {
  console.log(`open petition editor for petition #${id}`);
};

const columns = [
  { label: 'Petition' },
  { label: 'City' },
  { label: 'Owner' },
  { label: 'Supporters' },
  { label: 'Percentage' },
  { label: 'Status' }
];

const ItemsTemplate = ({ item, router }) => (
  <tr onClick={() => openPetitionEditor(item.id, router)}>
    <td>{item.title}</td>
    <td>{item.city}</td>
    <td>{item.owner}</td>
    <td>{item.supporters.length}</td>
    <td>{item.percentage}</td>
    <td>{item.status}</td>
  </tr>
);

export default withRouter(makePage(React.createClass({
  displayName: 'PetitionFinder',

  render() {
    const { location, router } = this.props;
    return (
      <div className="container-fluid">
        <h1>Petition Finder</h1>
        <AutoLoadFinder
          columns={columns}
          fetchData={getData}
          state={QueryStateContainer(location, router, RoutingConstants.PETITIONS.pathname)}
          itemsTemplate={ItemsTemplate}
          itemsTemplateProps={{ router }}
          searchConfig={[
            {
              name: 'title',
              id: 'titleSearchField',
              addon: 'search',
              type: 'string',
              lg: 3,
              md: 6,
              placeholder: 'Title'
            },
            {
              name: 'city',
              id: 'citySearchField',
              addon: 'search',
              type: 'autocomplete',
              lg: 3,
              md: 6,
              placeholder: 'City',
              autoCompleteStyle: {
                borderRadius: '0 4px 4px 0',
              },
              items: [
                { value: 'aarau', label: 'Aarau' },
                { value: 'aargau', label: 'Aargau' },
                { value: 'altach', label: 'Altach' },
                { value: 'alberschwende', label: 'Alberschwende' },
                { value: 'athen', label: 'Athen' }
              ],
            },
            {
              xs: 6,
              name: 'clear-filters',
              label: 'Clear Filters',
              role: 'clear-filters',
            },
            {
              name: 'sort',
              id: 'sortDropdown',
              type: 'options',
              xs: 6,
              pull: 'right',
              options: [
                { value: '', label: 'Sort' },
                { value: 'date', label: 'Date' },
                { value: 'trending', label: 'Trending' },
                { value: 'amount-supporters', label: 'Amount Supporters' }
              ],
            }
          ]}
          uniqueItemProperty="id"
        />
      </div>
    );
  }
})));
