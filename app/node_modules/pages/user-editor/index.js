import * as React from 'react';
import { withRouter } from 'react-router';
import makePage from 'components/page';
import Alert from 'components/alert';
import BasicUserInfo from 'components/basic-user-info';
import Button from 'components/button';
import LoadingIndicator from 'components/loading-indicator';
import UserAPI from 'api/user';
import { translate } from 'config/strings';


/**
 * The User Editor shows information about a user and lets you delete users from
 * the platform.
 */
export default withRouter(makePage(React.createClass({
  displayName: 'UserEditor',

  propTypes: {
    params: React.PropTypes.shape({
      id: React.PropTypes.string.isRequired,
    }).isRequired,
  },

  getInitialState: () => ({
    alert: null,
    loading: true,
    user: null,
  }),

  componentWillMount() {
    this.loadUser(this.props.params.id);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.params.id !== this.props.params.id) {
      this.loadUser(nextProps.params.id);
    }
  },

  /**
   * Loads a user by its id and saves it on the state. If an error occurs,
   * an error is saved on state.
   *
   * @param {number} id  The id of the user that should be loaded.
   */
  loadUser(id) {
    UserAPI.get(id).then(userData => {
      this.setState({
        alert: null,
        loading: false,
        user: userData.data
      });
    }).catch(() => {
      this.setState({
        user: null,
        loading: false,
        alert: { code: 'not-found', type: 'danger' }
      });
    });
  },

  /**
   * Delete the user after confirming.
   */
  /* eslint-disable no-alert */
  handleDeleteUser() {
    if (confirm(translate('users.delete.confirm'))) {
      this.setState({ loading: true }, () => {
        UserAPI.delete(this.state.user.id).then(() => {
          this.setState({
            alert: { code: 'delete-success', type: 'success' },
            loading: false,
          });
        }).catch(() => {
          this.setState({
            alert: { code: 'delete-failed', type: 'danger' },
            loading: false,
          });
        });
      });
    }
  },
  /* eslint-enable no-alert */

  render() {
    const { alert, loading, user } = this.state;
    if (loading) {
      return (<LoadingIndicator />);
    } else if (alert) {
      return (
        <div className="container-fluid">
          <Alert message={translate(`users.alert.${alert.code}`) } type={alert.type} />
        </div>
      );
    } else if (user) {
      return (
        <div className="container-fluid">
          <BasicUserInfo user={user} />
          <div className="text-center">
            <Button
              name="delete-user"
              label={translate('users.delete') }
              onAction={this.handleDeleteUser}
              variation="danger"
            />
          </div>
        </div>
      );
    }
    return (<LoadingIndicator />);
  }
})));
