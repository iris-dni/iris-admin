/* eslint-disable react/prop-types, react/no-multi-comp */
import * as React from 'react';
import { withRouter } from 'react-router';
import makePage from 'components/page';
import AutoLoadFinder from 'components/finder/autoload';
import QueryStateContainer from 'helpers/query-state-container';
import RoutingConstants from 'config/routing-constants';
import { translate } from 'config/strings';
import User from 'types/user';


function getUsers(skip, batchSize, config) {
  return new Promise((resolve, reject) => {
    const searchParams = {
      limit: batchSize,
      offset: skip,
      ft: config.q || void 0, // fulltext search
    };
    window.__swaggerClient.apis.user_admin.search(searchParams)
      .then((response) => {
        if (response && response.obj) {
          resolve({ data: response.obj.data, totalHits: response.obj.total });
        }
      })
      .catch((response) => { reject(response.obj); });
  });
}

const openUserEditor = (id, router) => {
  router.push(`/user/${id}`);
};

const columns = [
  {
    label: translate('users.first-name')
  },
  {
    label: translate('users.last-name')
  },
  {
    label: translate('users.email')
  },
  {
    label: translate('users.phone')
  },
  {
    label: translate('users.trusted')
  }
];

const ItemsTemplate = ({ item, router }) => {
  const user = User(item);
  if (user && user.id) {
    return (
      <tr
        style={{ cursor: 'pointer' }}
        title={translate('users.open-in-editor')}
        onClick={() => openUserEditor(user.id, router)}
      >
        <td>{user.firstname}</td>
        <td>{user.lastname}</td>
        <td>{user.email}</td>
        <td>{user.phone || translate('users.phone.default')}</td>
        <td>{translate(`users.trusted.${user.trusted}`)}</td>
      </tr>
    );
  }
  return null;
};

export default withRouter(makePage(React.createClass({
  displayName: 'UserFinder',

  render() {
    const { location, router } = this.props;
    return (
      <div className="container-fluid">
        <h1>{translate('users.finder-title')}</h1>
        <AutoLoadFinder
          columns={columns}
          fetchData={getUsers}
          itemsTemplate={ItemsTemplate}
          itemsTemplateProps={{ router }}
          searchConfig={[
            {
              name: 'q',
              type: 'string',
              id: 'searchField',
              addon: 'search',
              md: 6,
              placeholder: translate('users.search.placeholder'),
            }
          ]}
          state={QueryStateContainer(location, router, RoutingConstants.USERS.pathname)}
          uniqueItemProperty="email"
        />
      </div>
    );
  }
})));
