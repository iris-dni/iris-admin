/* eslint-disable react/prop-types, react/no-multi-comp */
import * as React from 'react';
import { withRouter } from 'react-router';
import makePage from 'components/page';
import Finder from 'components/finder';
import QueryStateContainer from 'helpers/query-state-container';
import tapEvent from 'helpers/tap-event';
import RoutingConstants from 'config/routing-constants';
import { translate } from 'config/strings';

const AutoLoadFinder = tapEvent('scroll', '#page-content-wrapper', Finder);

import UserData from './.data';

/* eslint-disable no-console */
function getUsers(skip, batchSize, config) {
  console.log(`loading data with config`, skip, batchSize, config);
  return new Promise((resolve/*, reject*/) => {
    let data = [];
    for (let i = skip; i < Math.min(skip + batchSize, UserData.length); i++) {
      data.push(UserData[i]);
    }
    setTimeout(() => { resolve({ data: data, totalHits: UserData.length }); }, 1000);
  });
}

/* eslint-disable no-unused-vars */
const openUserEditor = (id, router) => {
  console.log(`open user editor for #${id}`);
};

const columns = [
  {
    label: translate('users.first-name')
  },
  {
    label: translate('users.last-name')
  },
  {
    label: translate('users.email')
  },
  {
    label: translate('users.phone')
  },
  {
    label: translate('users.trusted')
  }
];

const ItemsTemplate = ({ item, router }) => (
  <tr style={{ cursor: 'pointer' }} title={translate('users.open-in-editor')} onClick={() => openUserEditor(item.id, router)}>
    <td>{item.firstname}</td>
    <td>{item.lastname}</td>
    <td>{item.email}</td>
    <td>{item.phone || translate('users.phone.default')}</td>
    <td>{translate(`users.trusted.${item.sso[0].trusted}`)}</td>
  </tr>
);

export default withRouter(makePage(React.createClass({
  displayName: 'UserFinder',

  render() {
    const { location, router } = this.props;
    return (
      <div className="container-fluid">
        <h1>{translate('users.finder-title')}</h1>
        <AutoLoadFinder
          columns={columns}
          fetchData={getUsers}
          itemsTemplate={ItemsTemplate}
          itemsTemplateProps={{ router }}
          searchConfig={[
            {
              name: 'q',
              type: 'string',
              id: 'searchField',
              addon: 'search',
              md: 6,
              placeholder: translate('users.search.placeholder'),
            }
          ]}
          state={QueryStateContainer(location, router, RoutingConstants.USERS.pathname)}
          uniqueItemProperty="email"
        />
      </div>
    );
  }
})));
