import { assert } from 'chai';

import {
  getStateName,
  getSubStateName,
  missingProps,
  unsavedProps,
  apiError,
  userCancelled,
} from '../helpers';

import {
  keys,
  stateNameOnly,
  stateNameAndParent,
} from './fixtures/helpers';

describe('petition/helpers', () => {
  describe('getStateName', () => {
    it('defaults to state.name', () => {
      assert.equal(getStateName(stateNameOnly), stateNameOnly.name);
    });

    it('prefers state.parent', () => {
      assert.equal(getStateName(stateNameAndParent), stateNameAndParent.parent);
    });
  });

  describe('getSubStateName', () => {
    it('defaults to undefined', () => {
      assert.isUndefined(getSubStateName(stateNameOnly));
    });

    it('returns state.name if state.parent is set', () => {
      assert.equal(getSubStateName(stateNameAndParent), stateNameAndParent.name);
    });
  });

  describe('missingProps', () => {
    it('returns an object', () => {
      assert.isObject(missingProps());
    });

    it('return an object with type = "missing-props"', () => {
      assert.equal(missingProps().type, 'missing-props');
    });

    it('sets the specified keys as .data', () => {
      assert.deepEqual(missingProps(keys).data, keys);
    });
  });

  describe('unsavedProps', () => {
    it('returns an object', () => {
      assert.isObject(unsavedProps());
    });

    it('returns an object with type = "unsaved-props"', () => {
      assert.equal(unsavedProps().type, 'unsaved-props');
    });

    it('sets the specified keys as .data', () => {
      assert.deepEqual(unsavedProps(keys).data, keys);
    });
  });

  describe('apiError', () => {
    it('returns an object', () => {
      assert.isObject(apiError());
    });

    it('returns an object with type = "api-error"', () => {
      assert.equal(apiError().type, 'api-error');
    });
  });

  describe('userCancelled', () => {
    it('returns an object', () => {
      assert.isObject(userCancelled());
    });

    it('returns an object with type = "user-cancelled"', () => {
      assert.equal(userCancelled().type, 'user-cancelled');
    });
  });
});
