import createApi from 'api/create-api';
import storage from 'helpers/storage';


export default createApi('petition_admin');
export const PetitionPublicAPI = createApi('petition');


const api = (trigger) => window.__swaggerClient.apis.petition_event[trigger];
const UNKNOWN_ERROR = { error: 'UNKNOWN' };


export const CITY_PORTAL_PARAM = 'city.portal.id';
export const CITY_PORTAL_CLEAR_FILTER = '';

export const retrieveCityPortalId = (location) => {
  /**
   * Retreive 'city.portal.id'.
   *
   * First, try to get it from location's query object.
   * If not present, try to retrieve it from 'storage'
   */
  const query = location.query;
  let cityPortalId = query[CITY_PORTAL_PARAM];
  let retrievedFromStorage = false;
  if (cityPortalId === null || cityPortalId === undefined) {
    cityPortalId = storage.getItem(`iris-${CITY_PORTAL_PARAM}`) || CITY_PORTAL_CLEAR_FILTER;
    if (cityPortalId === "undefined") {
      // localStore.setItem(..., undefined) stringifies! check for an
      // "undefined" string as well and clear in that case
      cityPortalId = CITY_PORTAL_CLEAR_FILTER;
    }
    retrievedFromStorage = true;
  }
  return {
    id: cityPortalId,
    retrievedFromStorage
  };
};


export const PetitionEventAPI = {
  /**
   * Triggers the specified transition on the petition identified with `id`.
   * `data` is an optional parameter.
   */
  trigger(id, trigger, data) {
    return new Promise((resolve, reject) => {
      api(trigger)({ contentId: id, data }).then(response => {
        if (response && response.obj) {
          resolve(response.obj);
        } else {
          reject(UNKNOWN_ERROR);
        }
      }).catch(response => {
        if (response && response.obj) {
          reject(response.obj);
        } else {
          reject(UNKNOWN_ERROR);
        }
      });
    });
  }
};
