import StateMachine from 'state-machine';

/**
 * Gets the main state name of the specified state.
 */
export const getStateName = (state) => state.parent || state.name;

/**
 * Returns the sub state, if any, or undefined.
 */
export const getSubStateName = (state) => (state.parent && state.name) || void 0;

/**
 * Gets the transitions that are possible from the specified state.
 */
export const getTransitions = (state) => {
  return new Promise((resolve, reject) => {
    StateMachine.get('petitions')
      .then(stateMachine => stateMachine.states.find(s => s.name === getStateName(state)))
      .then(mainState => {
        if (getSubStateName(state)) {
          return mainState.children.find(s => s.name === getSubStateName(state));
        }
        return mainState;
      })
      .then(realState => resolve(realState.transitions))
      .catch(reject);
  });
};

export const missingProps = (keys) => ({
  type: 'missing-props',
  data: keys,
});

export const unsavedProps = (keys) => ({
  type: 'unsaved-props',
  data: keys,
});

export const apiError = (response) => ({
  type: 'api-error',
  data: response,
});

export const userCancelled = () => ({
  type: 'user-cancelled',
});
