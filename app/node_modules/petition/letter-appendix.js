import * as React from 'react';
import _ from 'lodash';
import authenticate from 'auth';
import hasAdminAccess from '../auth/has-admin-access';
import Alert from 'components/alert';
import { PetitionPublicAPI } from 'petition/api';
import { PublicSupporterApi } from 'supporter/api';
import Template from './template';
import { translate } from 'config/strings';

export default authenticate(React.createClass({
  displayName: 'Letter-Appendix',

  propTypes: {
    location: React.PropTypes.shape({
      query: React.PropTypes.shape({
        token: React.PropTypes.string
      })
    }),
    me: React.PropTypes.shape({
      roles: React.PropTypes.arrayOf(React.PropTypes.string)
    }),
    params: React.PropTypes.shape({
      id: React.PropTypes.string.isRequired
    }),
  },

  getInitialState() {
    return {
      error: null,
      context: {
        petition: {},
        supporters: []
      }
    };
  },

  componentWillMount() {
    this.getPetition(this.props.params.id);
  },

  getPetition(petitionId) {
    if (petitionId) {
      PetitionPublicAPI.get(petitionId, 'owner').then((response) => {
        const petition = _.get(response, 'data', {});

        this.getSupporters(petitionId, _.get(petition, 'supporters.amount', 0), 50).then((responses) => {
          let supporters = [];

          responses.forEach((res) => {
            const data = _.get(res, 'data', []);
            supporters = supporters.concat(data);
          });

          this.setState({
            error: null,
            context: {
              petition: petition,
              supporters: supporters
            }
          });
        });
      }).catch((response) => {
        this.setState({
          error: response.error && response.error.description
        });
      });
    }
  },

  getSupporters(petitionId, amount, limit) {
    const isAdmin = hasAdminAccess(this.props.me);
    const token = this.props.location.query.token || null;
    let requestParams = {
      petition: petitionId,
      resolve: 'user',
      limit: limit
    };
    if (!isAdmin) {
      requestParams.token = token;
    }

    // submit multiple requests (api currently delivers max. 50 supporters per request)
    const requests = [];
    for (let i = 0; i < (amount / limit); i++) {
      requestParams.offset = i * limit;
      requests.push(PublicSupporterApi.search(requestParams));
    }
    return Promise.all(requests);
  },

  render() {
    const { error, context } = this.state;

    if (error) {
      return (
        <div className="container-fluid">
          <Alert message={error} />
        </div>
      );
    }

    const title = translate('petitions.appendix');
    return (
      <Template className="letter-appendix" title={title} url="/templates/letter-appendix.html" context={context} />
    );
  }
}), true /*allowPublicAccess*/);
