import * as React from 'react';
import Button from 'components/button';
import Card from 'components/card';
import FormNotification from 'components/form-notification';
import CityAutocomplete from 'city/autocomplete';
import TextInput from 'inputs/text';
import MultiLineTextInput from 'inputs/text/multiline';
import { translate } from 'config/strings';
import propTypes from './prop-types';


const PetitionShape = {
  id: React.PropTypes.string,
  city: React.PropTypes.shape({
    id: React.PropTypes.string,
  }).isRequired,
  type: React.PropTypes.string,
  description: React.PropTypes.string,
  suggested_solution: React.PropTypes.string,
  title: React.PropTypes.string,
};

// the fields this editor is responsible for
const responsibleFields = Object.keys(PetitionShape);


/**
 * Allows editing of basic petition info like title, city, etc.
 */
export default React.createClass({
  displayName: 'BasicPetitionInfo',

  propTypes: Object.assign({}, propTypes(PetitionShape), {
    /**
     * Whether the user should be able to edit the petition.
     */
    editable: React.PropTypes.bool,
  }),

  getDefaultProps: () => ({
    editable: false,
  }),

  getInitialState: () => ({
    error: false,
    working: false,
  }),

  handleSave() {
    const didComplete = (error = false) => this.setState({ error, working: false });
    this.setState({ error: false, working: true }, () => {
      this.props.onAction('save', responsibleFields)
        .then(didComplete)
        .catch(didComplete.bind(null, true));
    });
  },

  render() {
    const { editable, onValueChange, petition } = this.props;
    const { error, working } = this.state;

    const inputProps = (key) => ({
      id: key,
      name: key,
      value: petition[key],
      onValueChange: onValueChange,
      attributes: {
        disabled: !editable,
        rows: 10,
      },
    });

    const renderInput = (Component, key) => (
      <div className="col-xs-12" style={{ marginBottom: 12 }}>
        <label htmlFor={key}>{translate(`petitions.${key}`)}</label>
        <Component {...inputProps(key) } />
      </div>
    );

    const saveButtonProps = {
      label: translate(`petitions.actions.save${working ? '-pending' : ''}`),
      name: 'save',
      onAction: this.handleSave,
      attributes: {
        disabled: working,
      },
    };

    return (
      <Card title={translate('petitions.blocks.petition')}>
        <div className="row">
          <div className="col-xs-12" style={{ marginBottom: 12 }}>
            <div>
              <strong>{translate('petitions.id')}: {petition.id}</strong>
            </div>
          </div>
          {renderInput(CityAutocomplete, 'city')}
          {renderInput(TextInput, 'type')}
          {renderInput(MultiLineTextInput, 'description')}
          {renderInput(MultiLineTextInput, 'suggested_solution')}
          {renderInput(TextInput, 'title')}
          <div className="col-xs-12">
            { error
              ? <FormNotification type="error">
                  {translate('petitions.errors.save')}
                </FormNotification>
              : null
            }
          </div>
          <div className="col-xs-12 text-center">
            { editable
              ? <Button {...saveButtonProps} />
              : null
            }
          </div>
        </div>
      </Card>
    );
  }
});
