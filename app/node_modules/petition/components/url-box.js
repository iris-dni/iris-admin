import * as React from 'react';
import Card from 'components/card';
import FormNotification from 'components/form-notification';
import ItemsControl from 'components/items-control';
import LocationItem from './location-item';
import UrlInput from './url-input';
import propTypes from './prop-types';
import { translate } from 'config/strings';

/**
 * Shows a list of URLs and their Open Graph data.
 * Allows (1) adding URLs, (2) changing the visibility of URLs, (3) deleting
 * locations from the platform, and (4) re-fetching open graph data.
 */
export default React.createClass({
  displayName: 'UrlBox',

  propTypes: Object.assign({}, propTypes({}), {
    cardTitle: React.PropTypes.string.isRequired,
    name: React.PropTypes.string.isRequired,
  }),

  getInitialState: () => ({
    error: null,
  }),

  /**
   * First updates the petition in the petition editor and then initiates saving
   * of the changed field.
   */
  updateItemsAndSave(items) {
    this.setState({ error: null }, () => {
      this.props.onValueChange(this.props.name, items);
      setTimeout(() => {
        this.props.onAction('save', [this.props.name]).catch(() => {
          this.setState({ error: translate('petitions.errors.save-reload') });
        });
      });
    });
  },

  handleAction(action, payload) {
    const items = this.props.petition[this.props.name] || [];
    switch (action) {
      case 'add-url':
        // the top-level url is used by the back-end; data.url is used to render in OG Data.
        this.updateItemsAndSave([...items, { url: payload, data: { url: payload } }]);
        break;
      case 'delete':
        this.updateItemsAndSave(items.filter(i => i.id !== payload.id));
        break;
      case 'toggle-visibility':
        const toggleState = (state) => state === 'visible' ? 'hidden' : 'visible';
        this.updateItemsAndSave(items.map(i => {
          if (i.id !== payload.id) {
            return i;
          }
          return Object.assign({}, i, { state: toggleState(i.state) });
        }));
        break;
      case 'refetch-og':
        // fetch og-data and on response call onValueChange with the updated og-data
        // this will result in a state-change -> re-render and updated og-data in the
        // location items
        // eslint-disable-next-line no-console
        console.warn('[TODO] refetch-og', payload);
        // eslint-disable-next-line no-alert
        alert('Re-Fetch OG is not yet available');
        break;
      default:
        // eslint-disable-next-line no-console
        console.warn(`[NoSuchAction] Action "${action}" is unknown.`);
        break;
    }
  },

  render() {
    const { cardTitle, name, petition } = this.props;

    return (
      <Card title={cardTitle} >
        <div className="row">
          { this.state.error
            ? <div className="col-xs-12">
                <FormNotification type="error">
                  {this.state.error}
                </FormNotification>
              </div>
            : null }
          <ItemsControl
            items={petition[name] || []}
            itemsTemplate={LocationItem}
            itemsTemplateProps={{
              onAction: this.handleAction,
            }}
            uniqueItemProperty="id"
            />
          <div className="col-xs-12" style={{ marginTop: 12 }}>
            <UrlInput onAction={this.handleAction} />
          </div>
        </div>
      </Card >
    );
  }
});
