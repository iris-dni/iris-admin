import * as React from 'react';
import Button from 'components/button';
import OpenGraphData from 'components/og-data';
import Thumbnail from 'components/thumbnail';

/**
 * Represents one list item. Shows Open Graph Data and allows hiding, deleting,
 * and refetching the location.
 */
export default React.createClass({
  displayName: 'LocationItem',

  propTypes: {
    item: React.PropTypes.shape({
      data: React.PropTypes.shape({
        url: React.PropTypes.string.isRequired,
        og: React.PropTypes.shape({}),
      }).isRequired,
      id: React.PropTypes.string,
      state: React.PropTypes.oneOf(['visible', 'hidden']),
    }).isRequired,
    onAction: React.PropTypes.func.isRequired,
  },

  /**
   * Make the thumbnail the same size as the open graph table.
   */
  componentDidMount() {
    if (this._og && this._og._table) {
      if (this._og._table.clientHeight !== this._thumbnailSize) {
        this._thumbnailSize = this._og._table.clientHeight;
        this.forceUpdate();
      }
    }
  },

  handleAction(action) {
    this.props.onAction(action, this.props.item);
  },

  renderButton(props) {
    return (
      <span style={{ marginRight: 10  }}>
        <Button onAction={this.handleAction} {...props} />
      </span>
    );
  },

  render() {
    const { data, state } = this.props.item;
    const thumbnailSize = this._thumbnailSize || 180;

    const style = {
      opacity: state === 'visible' ? 1.0 : 0.35,
    };

    const ogData = Object.assign({}, data && data.og, {url: data && data.url});

    return (
      <div className="col-xs-12" style={{ marginBottom: 25 }}>
        <Thumbnail
          size={thumbnailSize}
          src={data && data.og && data.og.image}
          style={Object.assign({}, { float: 'left' }, style)}
        />
        <div style={{ marginLeft: thumbnailSize + 15 }}>
          <OpenGraphData
            ref={(c) => this._og = c}
            showAllRows
            {...ogData}
            style={style}
          />
          <div style={{ marginTop: -5 }}>
            {this.renderButton({ name: 'toggle-visibility', label: state === 'visible' ? 'Hide' : 'Show' })}
            {this.renderButton({ name: 'delete', variation: 'danger', label: 'Remove' })}
            {this.renderButton({ name: 'reset-og', label: 'Reset OG' })}
          </div>
        </div>
      </div>
    );
  }
});
