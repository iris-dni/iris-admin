/* eslint-disable react/no-multi-comp */
import * as React from 'react';
import Button from 'components/button';
import Card from 'components/card';
import FormNotification from 'components/form-notification';
import ItemsControl from 'components/items-control';
import Thumbnail from 'components/thumbnail';
import propTypes from './prop-types';
import { translate } from 'config/strings';

const ImageShape = {
  url: React.PropTypes.string.isRequired,
};

const PetitionShape = {
  images: React.PropTypes.arrayOf(React.PropTypes.shape(ImageShape)).isRequired,
};

/**
 * Displays one image thumbnail and a button to show/hide the image on the
 * petition.
 */
const ImageTemplate = React.createClass({
  displayName: 'ImageItemTemplate',

  propTypes: {
    item: React.PropTypes.shape(ImageShape).isRequired,
    onAction: React.PropTypes.func.isRequired,
  },

  handleAction(action) {
    this.props.onAction(action, this.props.item);
  },

  render() {
    const { item } = this.props;

    const containerStyle = {
      float: 'left',
      marginRight: 15,
      marginBottom: 15,
    };

    const imageStyle = {
      marginBottom: 5,
      opacity: item.visible ? void 0 : 0.35,
    };

    return (
      <div className="text-center" style={containerStyle}>
        <Thumbnail src={item.url} style={imageStyle} />
        <Button
          label={item.visible ? 'Hide' : 'Show'}
          name="toggle-visibility"
          onAction={this.handleAction}
          />
      </div>
    );
  }
});

/**
 * Renders a list/grid of image thumbnails.
 */
export default React.createClass({
  displayName: 'ImageBox',

  propTypes: Object.assign({}, propTypes(PetitionShape), {
    onAction: React.PropTypes.func.isRequired,
    onValueChange: React.PropTypes.func.isRequired,
  }),

  getInitialState: () => ({
    error: null,
  }),

  /**
   * First updates the petition stored in the petition editor and then initiates
   * saving the changed field.
   */
  updateItemsAndSave(updatedImages) {
    this.setState({ error: null }, () => {
      this.props.onValueChange('images', updatedImages, true);
      setTimeout(() => {
        this.props.onAction('save', ['images']).catch(() => {
          this.setState({ error: translate('petitions.errors.save-reload') });
        });
      });
    });
  },

  handleAction(action, item) {
    switch (action) {
      case 'toggle-visibility':
        const updatedImages = this.props.petition.images.map((image) => {
          if (image.url === item.url) {
            return Object.assign({}, item, { visible: !item.visible });
          }
          return image;
        });
        this.updateItemsAndSave(updatedImages);
        break;
      default:
        // eslint-disable-next-line no-console
        console.warn(`[ImageBox]: No such action "${action}".`);
        break;
    }
  },

  render() {
    return (
      <Card title="Images">
        <div className="row">
          <div className="col-xs-12">
            { this.state.error
              ? <div className="col-xs-12">
                <FormNotification type="error">
                  {this.state.error}
                </FormNotification>
              </div>
              : null
            }
            <ItemsControl
              items={this.props.petition.images || []}
              itemsTemplate={ImageTemplate}
              itemsTemplateProps={{ onAction: this.handleAction }}
              uniqueItemProperty="url"
              />
          </div>
        </div>
      </Card>
    );
  }
});
