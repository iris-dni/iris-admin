import * as React from 'react';
import Button from 'components/button';
import Card from 'components/card';
import FormNotification from 'components/form-notification';
import { translate } from 'config/strings';
import { getStateName, getSubStateName, getTransitions } from '../helpers';
import propTypes from './prop-types';

const PetitionShape = {
  state: React.PropTypes.shape({
    name: React.PropTypes.string.isRequired,
    parent: React.PropTypes.string.isRequired,
  }).isRequired,
  supporters: React.PropTypes.shape({
    amount: React.PropTypes.number.isRequired,
    required: React.PropTypes.number.isRequired,
  }).isRequired,
};

/**
 * Shows the current state of the petition and allows state transitions.
 */
export default React.createClass({
  displayName: 'PetitionStateInfo',

  propTypes: Object.assign({}, propTypes(PetitionShape)),

  getInitialState: () => ({
    error: null,
    transitions: [],
  }),

  componentWillMount() {
    this.fetchTransitions(this.props.petition.state);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.state !== this.props.state) {
      this.fetchTransitions(nextProps.petition.state);
    }
  },

  fetchTransitions(state) {
    getTransitions(state)
      .then(transitions => this.setState({ error: null, transitions }))
      .catch(error => this.setState({ error }));
  },

  getErrorDescription(error) {
    let errorDesc = translate(`errors.${error.type}`);
    const translateMapper = (key) => translate(`petitions.${key}`);
    switch (error.type) {
      case 'unsaved-props':
      case 'missing-props':
        const affectedProps = error.data.map(translateMapper);
        errorDesc = errorDesc.replace('$1', affectedProps.join(', '));
        break;
      default:
        errorDesc = errorDesc.replace('$1', error.data);
        break;
    }
    return errorDesc;
  },

  handleTransitionAction(action) {
    this.setState({ error: null }, () => {
      this.props.onAction('transition', action).then(() => {

      }).catch((error) => {
        if (error) {
          this.setState({ error });
        }
      });
    });
  },

  renderStatus() {
    const { amount, required } = this.props.petition.supporters;
    const line = translate('petitions.support-status')
      .replace('$1', amount)
      .replace('$2', required)
      .replace('$3', Math.floor(amount / required * 100) || 0);
    return (
      <p><strong>Status</strong>: {line}</p>
    );
  },

  renderStateHeader(label, state) {
    return (
      <div>
        <strong>{label}: {translate(`petitions.state.${state}`)}</strong>
      </div>
    );
  },

  renderExplanation(state) {
    return (
      <div>
        <p>{translate(`petitions.state.${state}.explanation`)}</p>
      </div>
    );
  },

  renderActionButtons() {
    const { transitions } = this.state;
    return (
      <div>
        {
          transitions.filter(t => ['check', 'reset'].indexOf(t.trigger) < 0).map(t => (
            <span key={t.trigger} style={{ marginRight: 10 }}>
              <Button
                name={t.trigger}
                label={translate(`petitions.actions.${t.trigger}`)}
                onAction={this.handleTransitionAction}
                variation={t.trigger === 'delete' ? 'danger' : void 0}
                />
            </span>
          ))
        }
      </div>
    );
  },

  render() {
    const { state } = this.props.petition;
    const { error } = this.state;

    const mainState = getStateName(state);
    const subState = getSubStateName(state);

    return (
      <Card title={translate('petitions.blocks.petition-state')}>
        <div className="row">
          <div className="col-xs-12">
            { this.renderStatus() }
            { this.renderStateHeader('State', mainState) }
            { this.renderExplanation(mainState) }
            { subState ? this.renderStateHeader('Substate', `${mainState}.${subState}`) : null }
            { subState ? this.renderExplanation(`${mainState}.${subState}`) : null }
            { error && error.type !== 'user-cancelled'
              ? <FormNotification type="error">
                {this.getErrorDescription(error)}
              </FormNotification>
              : null
            }
            { this.renderActionButtons() }
          </div>
        </div>
      </Card>
    );
  }
});
